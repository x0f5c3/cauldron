//! A lightweight implementation of decoders for popular used
//! audio formats [Flac, Wav, Mp3, Ogg, etc.] in pure Rust.
//!
//!
//! # Example
//!
//! ```ignore
//! use cauldron::audio::AudioSegment;
//!
//! let mut audio_segment = match AudioSegment::read("path-to-audio") {
//!   Ok(f)  => f,
//!   Err(e) => panic!("Couldn't open example file: {}", e)
//! };
//!
//! let samples: Vec<i32> = audio_segment.samples().map(|r| r.unwrap()).collect();
//! ```

// #[macro_use]
macro_rules! otry {
    ($res:expr) => {
        match $res {
            Ok(val) => val,
            Err(err) => return Some(Err(From::from(err))),
        }
    };
}

pub mod audio;
pub mod codecs;
pub mod errors;

// private modules
mod crc;
mod io;
mod utils;

// codec modules
mod flac;
mod mp3;
mod wav;

/// A type for result generated by Cauldron
pub type Result<T> = std::result::Result<T, errors::Error>;
